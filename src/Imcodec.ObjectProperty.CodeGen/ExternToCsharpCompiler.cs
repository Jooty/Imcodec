/*
BSD 3-Clause License

Copyright (c) 2024, Jooty

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
*/

using Imcodec.ObjectProperty.CodeGen.AST;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Imcodec.ObjectProperty.CodeGen {
    internal abstract class ExternToCsharpCompiler {

        private readonly List<string> _usings = [
            "System",
            "System.Collections.Generic",
            "Imcodec.Types",
            "Imcodec.IO",
            "Imcodec.Math",
            "Imcodec.ObjectProperty",
        ];

        internal abstract PropertyClassDefinition[] Compile(string externCode);

        internal virtual string WriteClassAsString(PropertyClassDefinition classDefinition,
                                                    string containingNamespace,
                                                    string copyrightHeader = "",
                                                    string autogeneratedWarning = "") {
            var classBuilder = new StringBuilder();
            classBuilder.AppendLine($"{copyrightHeader}\n");
            classBuilder.AppendLine($"{autogeneratedWarning}\n");

            foreach (var usingDirective in _usings) {
                classBuilder.AppendLine($"using {usingDirective};");
            }

            classBuilder.AppendLine($"\nnamespace {containingNamespace};\n");

            // We only care about the top-most base class.
            if (classDefinition.BaseClassNames.Count == 0) {
                return null;
            }

            var topBaseClass = classDefinition.BaseClassNames[0];

            classBuilder.AppendLine($"public record {classDefinition.ClassName} : {topBaseClass} {{\n");
            classBuilder.AppendLine($"\tpublic override uint GetHash() => {classDefinition.Hash};\n");
            foreach (var property in classDefinition.Properties) {
                classBuilder.AppendLine($"\t{WritePropertyAsString(property)}\n");
            }
            classBuilder.AppendLine("}");

            return classBuilder.ToString();
        }

        protected virtual string WritePropertyAsString(PropertyDefinition propertyDefinition) {
            var hash = propertyDefinition.Hash;
            var flags = propertyDefinition.Flags;
            var propertyType = propertyDefinition.CsharpType;
            var propertyName = propertyDefinition.Name;

            // Flags is an integer. Cast it to the enum type, and write it as a string.
            var flagsStr = GetFlagsString((int) flags);

            var endStr = $"// {flagsStr}"
                + $"\n\t[AutoProperty({hash}, {flags})] public {propertyType} {propertyName} {{ get; set; }}";

            return endStr;
        }

        public static string GetFlagsString(int value) {
            var names = Enum.GetValues(typeof(PropertyFlags))
                             .Cast<PropertyFlags>()
                             .Where(flag => flag != PropertyFlags.Prop_None)
                             .Where(flag => (value & (int) flag) == (int) flag)
                             .Select(flag => flag.ToString().Remove(0, 5));

            return string.Join(", ", names);
        }

    }
}
