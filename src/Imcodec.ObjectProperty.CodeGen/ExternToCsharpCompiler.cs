/*
BSD 3-Clause License

Copyright (c) 2024, Jooty

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
*/

using Imcodec.ObjectProperty.CodeGen.Definitions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Imcodec.ObjectProperty.CodeGen {
    internal abstract class ExternToCsharpCompiler {

        private readonly List<string> _usings = new List<string> {
            "System",
            "System.Collections.Generic",
            "Imcodec.Types",
            "Imcodec.IO",
            "Imcodec.Math",
            "Imcodec.ObjectProperty",
            "Imcodec.ObjectProperty.Bit",
        };

        /// <summary>
        /// Compiles the given extern code into a list of <see cref="Definition>.
        /// </summary>
        /// <param name="externCode">The extern code to compile.</param>
        /// <returns>The compiled definitions.</returns>
        internal abstract Definition[] Compile(string externCode);

        /// <summary>
        /// Writes a class as a string.
        /// </summary>
        /// <param name="classDefinition">The class definition to write.</param>
        /// <param name="containingNamespace">The namespace to contain the class.</param>
        /// <param name="copyrightHeader">The copyright header
        /// to include in the file.</param>
        /// <param name="autogeneratedWarning">The autogenerated warning
        /// to include in the file.</param>
        /// <returns>The class as a string.</returns>
        internal string WriteClassAsString(PropertyClassDefinition classDefinition,
                                                    string containingNamespace,
                                                    string copyrightHeader = "",
                                                    string autogeneratedWarning = "") {
            var classBuilder = new StringBuilder();
            classBuilder.AppendLine($"{copyrightHeader}\n");
            classBuilder.AppendLine($"{autogeneratedWarning}\n");

            foreach (var usingDirective in _usings) {
                classBuilder.AppendLine($"using {usingDirective};");
            }

            classBuilder.AppendLine($"\nnamespace {containingNamespace};\n");

            var topBaseClass = classDefinition.BaseClassNames[0];

            classBuilder.AppendLine($"public record {classDefinition.Name} : {topBaseClass} {{\n");
            classBuilder.AppendLine($"\tpublic override uint GetHash() => {classDefinition.Hash};\n");
            foreach (var property in classDefinition.Properties) {
                classBuilder.AppendLine($"\t{WritePropertyAsString(property)}\n");
            }
            classBuilder.AppendLine("}");

            return classBuilder.ToString();
        }

        /// <summary>
        /// Writes an enum as a string.
        /// </summary>
        /// <param name="enumDefinition">The enum definition to write.</param>
        /// <param name="containingNamespace">The namespace to contain the enum.</param>
        /// <param name="copyrightHeader">The copyright header
        /// to include in the file.</param>
        /// <param name="autogeneratedWarning">The autogenerated warning
        /// to include in the file.</param>
        /// <returns>The enum as a string.</returns>
        internal string WriteEnumAsString(EnumDefinition enumDefinition,
                                                   string containingNamespace,
                                                   string copyrightHeader = "",
                                                   string autogeneratedWarning = "") {
            var enumBuilder = new StringBuilder();
            enumBuilder.AppendLine($"{copyrightHeader}\n");
            enumBuilder.AppendLine($"{autogeneratedWarning}\n");

            enumBuilder.AppendLine($"namespace {containingNamespace};\n");

            enumBuilder.AppendLine($"public enum {enumDefinition.Name} {{\n");
            foreach (var pair in enumDefinition.Options) {
                enumBuilder.AppendLine($"\t{pair.Key} = {pair.Value},");
            }
            enumBuilder.AppendLine("}");

            return enumBuilder.ToString();
        }

        private string WritePropertyAsString(PropertyDefinition propertyDefinition) {
            var hash = propertyDefinition.Hash;
            var flags = propertyDefinition.Flags;
            var propertyType = propertyDefinition.CsharpType;
            var propertyName = propertyDefinition.Name;

            // Flags is an integer. Cast it to the enum type, and write it as a string.
            var flagsStr = GetFlagsString((int) flags);

            var endStr = $"// {flagsStr}"
                + $"\n\t[AutoProperty({hash}, {flags})] public {propertyType} {propertyName} {{ get; set; }}";

            return endStr;
        }

        private static string GetFlagsString(int value) {
            var names = Enum.GetValues(typeof(PropertyFlags))
                             .Cast<PropertyFlags>()
                             .Where(flag => flag != PropertyFlags.Prop_None)
                             .Where(flag => (value & (int) flag) == (int) flag)
                             .Select(flag => flag.ToString().Remove(0, 5));

            return string.Join(", ", names);
        }

    }
}
