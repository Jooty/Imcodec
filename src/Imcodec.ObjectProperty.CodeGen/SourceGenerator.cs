/*
BSD 3-Clause License

Copyright (c) 2024, Jooty

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
*/

using System.Text;
using Microsoft.CodeAnalysis;
using Imcodec.ObjectProperty.CodeGen.AST;
using Imcodec.ObjectProperty.CodeGen.JSON;

namespace Imcodec.ObjectProperty.CodeGen;

[Generator]
public sealed class SourceGenerator(string input = "") : ISourceGenerator {

    private const string COPYRIGHT_HEADER = @"/*
BSD 3-Clause License

Copyright (c) 2024, Jooty

Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
*/";
    private static readonly string s_autoGeneratedWarning = $"// <auto-generated by {typeof(SourceGenerator).Assembly.GetName().Name}>";

    public void Execute(GeneratorExecutionContext context) {
        if (string.IsNullOrEmpty(input)) {
            // We really only ever have `input` set to something for tests. In a real-world scenario, this would be a file path.
            // Search the context to find the file path that ends with `.json`.
            var relevantContentFiles = context.AdditionalFiles.Where(static file => file.Path.EndsWith(".json"));
            if (!relevantContentFiles.Any()) {
                return;
            }

            var file = relevantContentFiles.First();
            input = file.GetText(context.CancellationToken)?.ToString()
                ?? throw new Exception("The file text is null.");
        }

        var jsonCompiler = new JsonToCsharpCompiler();
        var compilerDump = jsonCompiler.Compile(input)
            ?? throw new Exception("The compiler dump is empty.");

        var containingNamespace = context.Compilation.GetEntryPoint(context.CancellationToken)?.ContainingNamespace?.ToString()
            ?? throw new Exception("The containing namespace is null.");

        foreach (var classDefinition in compilerDump) {
            var classSource = jsonCompiler.WriteClassAsString(classDefinition, containingNamespace, COPYRIGHT_HEADER, s_autoGeneratedWarning);

            // todo: not do this
            if (classSource == null) {
                continue;
            }

            context.AddSource($"{classDefinition.ClassName}.g.cs", classSource);
        }

        var dispatcherClass = WriteDispatcherClass(compilerDump, containingNamespace);
        context.AddSource("TypeCache.g.cs", dispatcherClass);
    }

    public void Initialize(GeneratorInitializationContext context) { }

    private static string WriteDispatcherClass(PropertyClassDefinition[] classDefinitions, string containingNamespace) {
        var dispatcherBuilder = new StringBuilder();
        dispatcherBuilder.AppendLine($"{COPYRIGHT_HEADER}\n");
        dispatcherBuilder.AppendLine($"{s_autoGeneratedWarning}\n");
        dispatcherBuilder.AppendLine($"namespace {containingNamespace};");

        dispatcherBuilder.AppendLine("public static class TypeCache {");
        dispatcherBuilder.AppendLine($"\n   public static PropertyClass Dispatch(uint hash) {{");
        dispatcherBuilder.AppendLine("      switch (hash) {{");
        foreach (var classDefinition in classDefinitions) {
            dispatcherBuilder.AppendLine($"         case {classDefinition.Hash}: return new {classDefinition.ClassName}();");
        }
        dispatcherBuilder.AppendLine("      }");
        dispatcherBuilder.AppendLine("   }");
        dispatcherBuilder.AppendLine("}");

        return dispatcherBuilder.ToString();
    }

}
